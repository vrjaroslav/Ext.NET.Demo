@using Uber.Core
@model Uber.Core.Customer
@{
    var X = Html.X();
}

@(X.Panel()
    .ID("CustomersPanel")
    .Title("Customers")
    .Layout(LayoutType.Border)
    .Closable(true)
    .Items(
        X.GridPanel()
            .Region(Region.Center)
            .ID("CustomersGrid")
            .Store(X.Store()
                .ID("CustomersStore")
                .RemoteSort(true)
                .RemotePaging(true)
                .PageSize(25)
                .Model(X.Model()
                    .ClientIdProperty("PhantomId")
                    .IDProperty("Id")
                    .Name("Customer")
                    .Fields(
                        X.ModelFieldFor(m => m.Id)
                            .UseNull(true),
                        X.ModelFieldFor(m => m.PhantomId),
                        X.ModelFieldFor(m => m.FullName),
                        X.ModelFieldFor(m => m.FirstName),
                        X.ModelFieldFor(m => m.LastName),
                        X.ModelFieldFor(m => m.Company),
                        X.ModelFieldFor(m => m.Email),
                        X.ModelFieldFor(m => m.BillingAddress),
                        X.ModelFieldFor(m => m.ShippingAddress),
                        X.ModelFieldFor(m => m.ContactPhone),
                        X.ModelFieldFor(m => m.CellPhone),
                        X.ModelFieldFor(m => m.Fax)
                    )
                )
                .Proxy(X.AjaxProxy()
                    .Url(Url.Action("ReadData", "Customers"))
                    .Reader(X.JsonReader().Root("data"))
                )
                .Sorters(
                    Html.X().DataSorter().Property("FullName").Direction(Ext.Net.SortDirection.ASC)                                
                )
            )
            .ColumnModel(
                X.Column()
                    .DataIndex("Id")
                    .Text("Id")
                    .Width(50),
                X.Column()
                    .DataIndex("FullName")
                    .Text("Name")
                    .Width(100),
                X.Column()
                    .DataIndex("Company")
                    .Text("Company")
                    .Width(100),
                X.Column()
                    .Text("Address")
                    .Flex(1)
                    .Sortable(false)
                    .Renderer("return Ext.String.format('{0}, {1}, {2}, {3}', record.data.BillingAddress.StreetAddress, record.data.BillingAddress.City, record.data.BillingAddress.ZipCode, record.data.BillingAddress.Country.Name);"),
                X.Column()
                    .DataIndex("ContactPhone")
                    .Text("Phone")
                    .Width(100),
                X.Column()
                    .DataIndex("CellPhone")
                    .Text("Mobile")
                    .Width(100)
            )
            .Features(
                Html.X().GridFilters()
                    .Filters(
                        Html.X().NumericFilter().DataIndex("Id"),
                        Html.X().StringFilter().DataIndex("FullName"),
                        Html.X().StringFilter().DataIndex("Company"),
                        Html.X().StringFilter().DataIndex("ContactPhone"),
                        Html.X().StringFilter().DataIndex("CellPhone")
                    )
            )
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        Html.X().Button()
                            .Text("Add")
                            .Icon(Icon.Add)
                            .Handler("addRecordButtonHandler('Customers', new Customer({  }));"),

                        Html.X().Button()
                            .Text("Delete")
                            .Icon(Icon.Exclamation)
                            .DirectEvents(de => {
                                de.Click.Url = Url.Action("Delete", "Customers");
                                de.Click.Confirmation.Message = "Are you sure you want to delete this record?";
                                de.Click.Confirmation.ConfirmRequest = true;
                                de.Click.ExtraParams.Add(new Parameter("id", "getSelectedIdParameter(this.up('grid'))", ParameterMode.Raw));
                                de.Click.Success = "recordDeleteSuccess(this, this.up('grid'));";
                            })
                    )
            )
            .SelectionModel(
                Html.X().RowSelectionModel()
                    .Mode(SelectionMode.Single)
                    .Listeners(l =>
                    {
                        l.Select.Handler = "gridRowSelected('Customers', record); ";
                    })
            ),
                
        X.FormPanel()
            .ID("CustomersForm")
            .Region(Region.East)
            .AutoScroll(true)
            .Width(400)
            .BodyPaddingSummary("0 10")
            .DefaultAnchor("100%")
            .Items(
                X.HiddenFor(m => m.Id)
                    .ID("CustomersIdValue"),
                X.DisplayFieldFor(m => m.Id)
                    .ID("CustomersId"),
                X.TextFieldFor(m => m.FirstName)
                    .ID("CustomersFirstName")
                    .FieldLabel("First Name")
                    .AllowBlank(false),
                X.TextFieldFor(m => m.LastName)
                    .ID("CustomersLastName")
                    .FieldLabel("Last Name")
                    .AllowBlank(false),
                X.TextFieldFor(m => m.Company)
                    .ID("CustomersCompany")
                    .FieldLabel("Company")
                    .AllowBlank(false),
                X.TextFieldFor(m => m.Email)
                    .ID("CustomersEmail")
                    .FieldLabel("Email")
                    .StandardVtype(ValidationType.Email)
                    .AllowBlank(false),
                X.TextFieldFor(m => m.ContactPhone)
                    .ID("CustomersContactPhone"),
                X.TextFieldFor(m => m.CellPhone)
                    .Icon(Icon.None)
                    .ID("CustomersCellPhone"),
                X.TextFieldFor(m => m.Fax)
                    .ID("CustomersFax"),
                X.FieldSet()
                    .Title("Billing Address")
                    .DefaultAnchor("100%")
                    .Items(
                        X.HiddenFor(m => m.BillingAddress.Id)
                            .DataIndex("BillingAddress.Id")
                            .Name("BillingAddressId")
                            .ID("CustomersBillingAddressId"),
                        X.TextFieldFor(m => m.BillingAddress.StreetAddress)
                            .DataIndex("BillingAddress.StreetAddress")
                            .ID("CustomersBillingStreetAddress")
                            .AllowBlank(false),
                        X.TextFieldFor(m => m.BillingAddress.City)
                            .DataIndex("BillingAddress.City")
                            .ID("CustomersBillingCity")
                            .AllowBlank(false),
                        X.TextFieldFor(m => m.BillingAddress.State)
                            .DataIndex("BillingAddress.State")
                            .ID("CustomersBillingState"),
                        X.ComboBox()
                            .ID("CustomersBillingCountry")
                            .FieldLabel("Country")
                            .DataIndex("BillingAddress.Country.Id")
                            .Name("BillingAddress.CountryId")
                            .DisplayField("Name")
                            .ValueField("Id")
                            .Store(X.StoreFor<Country>()
                                .Proxy(Html.X().AjaxProxy()
                                    .Url(Url.Action("GetCountries", "Customers"))
                                    .Reader(Html.X().JsonReader().Root("data"))
                                )
                            ),
                        X.TextFieldFor(m => m.BillingAddress.ZipCode)
                            .DataIndex("BillingAddress.ZipCode")
                            .AllowBlank(false)
                            .ID("CustomersBillingZipCode")
                    )
                ,
                X.FieldSet()
                    .Title("Shipping Address")
                    .DefaultAnchor("100%")
                    .Items(
                        X.HiddenFor(m => m.ShippingAddress.Id)
                            .DataIndex("ShippingAddress.Id")
                            .Name("ShippingAddressId")
                            .ID("CustomersShippingAddressId"),
                        X.TextFieldFor(m => m.ShippingAddress.StreetAddress)
                            .DataIndex("ShippingAddress.StreetAddress")
                            .ID("CustomersShippingStreetAddress")
                            .AllowBlank(false),
                        X.TextFieldFor(m => m.ShippingAddress.City)
                            .DataIndex("ShippingAddress.City")
                            .ID("CustomersShippingCity")
                            .AllowBlank(false),
                        X.TextFieldFor(m => m.ShippingAddress.State)
                            .DataIndex("ShippingAddress.State")
                            .ID("CustomersShippingState"),
                        X.ComboBox()
                            .ID("ShippingAddressCountry")
                            .FieldLabel("Country")
                            .DataIndex("ShippingAddress.Country.Id")
                            .Name("ShippingAddress.CountryId")
                            .DisplayField("Name")
                            .ValueField("Id")
                            .Store(X.StoreFor<Country>()
                                .Proxy(Html.X().AjaxProxy()
                                    .Url(Url.Action("GetCountries", "Customers"))
                                    .Reader(Html.X().JsonReader().Root("data"))
                                )
                            ),
                        X.TextFieldFor(m => m.ShippingAddress.ZipCode)
                            .DataIndex("ShippingAddress.ZipCode")
                            .AllowBlank(false)
                            .ID("CustomersShippingZipCode")
                    )
            )
            .TopBar(
                X.Toolbar()
                    .Items(
                        X.ToolbarFill(),
                        X.Button()
                            .Text("Save")
                            .Icon(Icon.Disk)
                            .DirectEvents(de => {
                                de.Click.Url = Url.Action("Save", "Customers");
                                de.Click.FormID = "CustomersForm";
                                de.Click.Success = "recordAddSuccess('Customers');";
                            }),
                        X.Button()
                            .Text("Cancel")
                            .Icon(Icon.Cross)
                            .Listeners(l => {
                                l.Click.Handler = "recordSaveCancel('Customers');";
                            })
                    )
            )
    )
)