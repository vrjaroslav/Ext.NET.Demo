@using Uber.Core
@model Uber.Core.User
@{
    var X = Html.X();
}

@(X.Panel()
    .ID("UsersPanel")
    .Title("Users")
    .Layout(LayoutType.Border)
    .Closable(true)
    .Items(
        X.GridPanel()
            .Region(Region.Center)
            .ID("UsersGrid")
            .Store(X.Store()
                .RemoteSort(true)
                .RemotePaging(true)
                .PageSize(25)
                .Model(X.Model()
                    .ClientIdProperty("PhantomId")
                    .IDProperty("Id")
                    .Name("User")
                    .Fields(
                        X.ModelFieldFor(m => m.Id)
                            .UseNull(true),
                        X.ModelFieldFor(m => m.PhantomId),
                        X.ModelFieldFor(m => m.FirstName),
                        X.ModelFieldFor(m => m.LastName),
                        X.ModelFieldFor(m => m.UserName)
                    )
                )
                .ID("UsersStore")
                .Proxy(X.AjaxProxy()
                    .Url(Url.Action("ReadData", "Account"))
                    .Reader(X.JsonReader().Root("data"))
                )
                .Sorters(
                    Html.X().DataSorter().Property("UserName").Direction(Ext.Net.SortDirection.ASC)                                
                )
            )
            .ColumnModel(
                X.ColumnFor(Model, m => m.Id)
                    .ToBuilder<Column.Builder>(),
                X.ColumnFor(Model, m => m.UserName)
                    .ToBuilder<Column.Builder>()
                    .Flex(1),
                X.ColumnFor(Model, m => m.FirstName)
                    .ToBuilder<Column.Builder>()
                    .Flex(1),
                X.ColumnFor(Model, m => m.LastName)
                    .ToBuilder<Column.Builder>()
                    .Flex(1)
            )
            .Features(
                Html.X().GridFilters()
                    .Filters(
                        Html.X().NumericFilter().DataIndex("Id"),
                        Html.X().StringFilter().DataIndex("UserName"),
                        Html.X().StringFilter().DataIndex("FirstName"),
                        Html.X().StringFilter().DataIndex("LastName")
                    )
            )
            .TopBar(
                X.Toolbar()
                    .Items(
                        X.Button()
                            .Text("Add")
                            .Icon(Icon.Add)
                            .Disabled(true)
                            .Handler("addRecordButtonHandler('User', new User());"),

                        X.Button()
                            .Disabled(true)
                            .Text("Disable account")
                            .Icon(Icon.Exclamation)
                            .DirectEvents(de =>
                            {
                                de.Click.Url = Url.Action("Disable", "Account");
                                de.Click.Confirmation.Message = "Are you sure you want to disable this account?";
                                de.Click.Confirmation.ConfirmRequest = true;
                                de.Click.ExtraParams.Add(new Parameter("id", "getSelectedIdParameter(this.up('grid'))", ParameterMode.Raw));
                                de.Click.Success = "recordDeleteSuccess(this, this.up('grid'));";
                            })
                    )
            )
            .SelectionModel(
                X.RowSelectionModel()
                    .Mode(SelectionMode.Single)
                    .Listeners(l =>
                    {
                        l.Select.Handler = "gridRowSelected('Users', record);";
                    })
            ),

        X.FormPanel()
            .ID("UsersForm")
            .Region(Region.East)
            .Width(400)
            .AutoScroll(true)
            .BodyPaddingSummary("0 10")
            .DefaultAnchor("100%")
            .Items(
                X.HiddenFor(m => m.Id)
                    .ID("UsersIdValue"),
                X.DisplayFieldFor(m => m.Id)
                    .ID("UsersId"),
                X.TextFieldFor(m => m.FirstName)
                    .ID("UsersFirstName")
                    .FieldLabel("First Name")
                    .AllowBlank(false),
                X.TextFieldFor(m => m.UserName)
                    .ID("UsersUserName")
                    .FieldLabel("UserName")
                    .AllowBlank(false),
                X.TextFieldFor(m => m.LastName)
                    .ID("UsersLastName")
                    .FieldLabel("Last Name")
                    .AllowBlank(false)
            )
            .TopBar(
                X.Toolbar()
                    .Items(
                        X.ToolbarFill(),
                        X.Button()
                            .Text("Save")
                            .Icon(Icon.Disk)
                            .DirectEvents(de => {
                                de.Click.Url = Url.Action("Save", "Account");
                                de.Click.FormID = "UsersForm";
                                de.Click.Success = "recordAddSuccess('Users'); ";
                            }),
                        X.Button()
                            .Text("Cancel")
                            .Icon(Icon.Cross)
                            .Listeners(l => {
                                l.Click.Handler = "recordSaveCancel('Users');";
                            })
                )
            )
    )
)