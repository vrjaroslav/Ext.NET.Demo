@model List<Uber.Core.OrderChartData>

@{
    ViewBag.Title = "Bar Chart - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}

@section headtag
{
     <script>
        var saveChart = function (btn) {
            Ext.MessageBox.confirm('Confirm Download', 'Would you like to download the chart as an image?', function (choice) {
                if (choice == 'yes') {
                    btn.up('panel').down('chart').save({
                        type: 'image/png'
                    });
                }
            });
        };
    </script>
}

@section bodytag 
{
    <h1>Bar Chart Sample</h1>
        
    <p>Display a sets of random data in a bar series. Reload data will randomly generate a new set of data in the store.</p>
    
    @(X.ChartTheme()
        .ThemeName("White")
        .Axis(new SpriteAttributes{ Stroke = "rgb(8,69,148)", StrokeWidth = 1})
        .AxisLabel(new SpriteAttributes { Fill = "rgb(8,69,148)", Font = "12px Arial", FontFamily = "Arial" })
        .AxisTitle(new SpriteAttributes { Font="bold 18px Arial" })
    )

    @(X.Panel()
        .Title("Bar Chart")
        .Layout(LayoutType.Fit)
        .Width(800)
        .Height(600)
        .TopBar(X.Toolbar()
            .Items(
                X.Button()
                    .Text("Reload Data")
                    .Icon(Icon.ArrowRefresh)
                    .Handler("#{Chart1}.getStore().reload()"),
                X.Button()
                    .Text("Save Chart")
                    .Icon(Icon.Disk)
                    .Handler("saveChart")
            )
        )
        .Items(
            X.Chart()
                .ID("Chart1")
                .Shadow(true)
                .Theme("White")
                .Animate(true)
                .Background(X.DrawBackground()
                    .Gradient(X.Gradient()
                        .GradientID("backgroundGradient")
                        .Angle(45)
                        .Stops(s => {
                            s.Add(X.GradientStop()
                                .Offset(0)
                                .Color("#ffffff"));
                            s.Add(X.GradientStop()
                                .Offset(100)
                                .Color("#eaf1f8"));
                        })
                    )
                )
                .Store(X.Store()
                    .Data(Model)
                    .Model(X.Model()
                        .Fields(
                            X.ModelField().Name("Month").Type(ModelFieldType.Int),
                            X.ModelField().Name("OrdersCount").Type(ModelFieldType.Int)
                        )
                    )
                    .Proxy(X.AjaxProxy()
                        .Url(Url.Action("GetData"))
                        .Reader(X.JsonReader().Root("data"))
                    )
                )
                .Axes(
                    X.NumericAxis()
                        .Fields("Month")
                        .Position(Position.Bottom)
                        .Title("Month")
                        .Minimum(1)
                        .Maximum(12)
                        .MinorTickSteps(1)
                        ,
                    X.NumericAxis()
                        .Position(Position.Left)
                        .Fields("OrdersCount")
                        .Title("Orders Count")
                )
                .Series(X.LineSeries()
                    .Axis(Position.Bottom)
                    .Highlight(true)
                    .XField("Month")
                    .YField("OrdersCount")
                    .Tips(X.ChartTip()
                        .TrackMouse(true)
                        .Width(140)
                        .Height(28)
                        .Renderer(r => r.Handler = "this.setTitle(Ext.Date.getShortMonthName(storeItem.get('Month')) + ': ' + storeItem.get('OrdersCount') + ' orders');")
                    )
                    //.Label(X.SeriesLabel()
                    //    .Display(SeriesLabelDisplay.InsideEnd)
                    //    .Field(new [] { "Month" })
                    //    .Orientation(Orientation.Horizontal)
                    //    .Color("#333")
                    //    .TextAnchor("middle")
                    //)
                )
        )
    )
}