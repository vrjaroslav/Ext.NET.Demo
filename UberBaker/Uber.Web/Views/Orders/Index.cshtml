@using Uber.Web.Models
@model Uber.Web.Models.OrderModel

@{
    var X = Html.X();
}

@(X.Panel()
    .ID("OrdersPanel")
    .Title("Orders")
    .Layout(LayoutType.Border)
    .Closable(true)
    .Items(
        X.GridPanel()
            .Region(Region.Center)
            .ID("OrdersGrid")
            .Store(X.Store()
                .ID("OrdersStore")
                .RemoteSort(true)
                .RemotePaging(true)
                .PageSize(25)
                .Model(X.Model()
                    .ClientIdProperty("PhantomId")
                    .IDProperty("Id")
                    .Name("Order")
                    .Fields(
                        X.ModelFieldFor(m => m.Id)
                            .UseNull(true),
                        X.ModelFieldFor(m => m.PhantomId),
                        X.ModelFieldFor(m => m.OrderDate),
                        X.ModelFieldFor(m => m.Quantity),
                        X.ModelFieldFor(m => m.GrossTotal),
                        X.ModelFieldFor(m => m.Customer),
                        X.ModelFieldFor(m => m.CustomerId),
                        X.ModelFieldFor(m => m.Product),
                        X.ModelFieldFor(m => m.ProductId)
                    )
                )
                .Proxy(X.AjaxProxy()
                    .Url(Url.Action("ReadData", "Orders"))
                    .Reader(X.JsonReader().Root("data"))
                )
                .Sorters(
                    Html.X().DataSorter().Property("OrderDate").Direction(Ext.Net.SortDirection.ASC)                                
                )
            )
            .ColumnModel(
                X.ColumnFor(m => m.Id)
                    .ToBuilder<Column.Builder>()
                    .Text("Id")
                    .Width(50),
                X.DateColumn()
                    .DataIndex("OrderDate")
                    .Text("Date")
                    .Format("yyyy-MM-dd"),
                X.ColumnFor(m => m.Product)
                    .ToBuilder<Column.Builder>()
                    .Text("Product")
                    .Renderer("return record.data.Product.Name;")
                    .Sortable(false)
                    .Width(100),
                X.ColumnFor(m => m.Customer)
                    .ToBuilder<Column.Builder>()
                    .Text("Customer")
                    .Renderer("return Ext.String.format('{0}, {1}', record.data.Customer.FullName, record.data.Customer.Company);")
                    .Sortable(false)
                    .Flex(1),
                X.ColumnFor(m => m.Quantity)
                    .ToBuilder<Column.Builder>()
                    .Text("Quantity")
                    .Width(100),
                X.ColumnFor(m => m.GrossTotal)
                    .ToBuilder<Column.Builder>()
                    .Text("Gross Total")
                    .Width(100)
                    .Renderer(RendererFormat.UsMoney)
            )
            .Features(
                Html.X().GridFilters()
                    .Filters(
                        Html.X().NumericFilter().DataIndex("Id"),
                        Html.X().DateFilter().DataIndex("OrderDate"),
                        Html.X().NumericFilter().DataIndex("Quantity"),
                        Html.X().NumericFilter().DataIndex("GrossTotal")
                    )
            )
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        Html.X().Button()
                            .Text("Add")
                            .Icon(Icon.Add)
                            .Handler("addRecordButtonHandler('Orders', new Order({  }));"),

                        Html.X().Button()
                            .Text("Delete")
                            .ID("OrdersDeleteButton")
                            .Disabled(true)
                            .Icon(Icon.Exclamation)
                            .DirectEvents(de => {
                                de.Click.Url = Url.Action("Delete", "Orders");
                                de.Click.Confirmation.Message = "Are you sure you want to delete this record?";
                                de.Click.Confirmation.ConfirmRequest = true;
                                de.Click.ExtraParams.Add(new Parameter("id", "getSelectedIdParameter(this.up('grid'))", ParameterMode.Raw));
                                de.Click.Success = "recordDeleteSuccess(this, this.up('grid'), 'Orders');";
                            })
                    )
            )
            .SelectionModel(
                Html.X().RowSelectionModel()
                    .Mode(SelectionMode.Single)
                    .Listeners(l =>
                    {
                        l.Select.Handler = "gridRowSelected('Orders', record);";
                        l.Deselect.Handler = "gridRowDeselected('Orders');";
                    })
            )
            .BottomBar(
                Html.X().PagingToolbar()
            ),
                
        X.FormPanel()
            .ID("OrdersForm")
            .Region(Region.East)
            .Width(400)
            .AutoScroll(true)
            .DefaultAnchor("100%")
            .BodyPaddingSummary("0 10")   
            .Listeners(l =>
            {
                l.ValidityChange.Handler = "validityChange('Orders', valid);";
            })         
            .Items(
                X.HiddenFor(m => m.Id)
                    .ID("OrdersIdValue"),
                X.DisplayFieldFor(m => m.Id)
                    .ID("OrdersId"),
                X.DateFieldFor(m => m.OrderDate)
                    .ID("OrdersOrderDate")
                    .FieldLabel("Order Date")
                    .AllowBlank(false)
                    .Format("yyyy-MM-dd"),
                X.ComboBox()
                    .FieldLabel("Customer")
                    .Name("CustomerId")
                    .DisplayField("FullName")
                    .ValueField("Id")
                    .ForceSelection(true)
                    .Store(X.StoreFor<CustomerModel>()
                        .Proxy(Html.X().AjaxProxy()
                            .ExtraParams(e => e.Add(new Parameter("getAll", "true", ParameterMode.Raw)))
                            .Url(Url.Action("ReadData", "Customers"))
                            .Reader(Html.X().JsonReader().Root("data"))
                        )
                    ),
                X.ComboBox()
                    .FieldLabel("Product")
                    .Name("ProductId")
                    .DisplayField("Name")
                    .ValueField("Id")
                    .ForceSelection(true)
                    .Store(X.StoreFor<ProductModel>()
                        .Proxy(Html.X().AjaxProxy()
                            .ExtraParams(e => e.Add(new Parameter("getAll", "true", ParameterMode.Raw)))
                            .Url(Url.Action("ReadData", "Products"))
                            .Reader(Html.X().JsonReader().Root("data"))
                        )
                    ),
                X.NumberFieldFor(m => m.Quantity)
                    .ID("OrdersQuantity")
                    .FieldLabel("Quantity")
                    .AllowBlank(false),
                X.DisplayFieldFor(m => m.GrossTotal)
                    .ID("OrdersGrossTotal")
                    .FieldLabel("Gross Total")
                    .CustomConfig(c =>
                    {
                        c.Add(new ConfigItem("renderer", "function (value) { return Ext.util.Format.usMoney(value); }", ParameterMode.Raw));
                    })
            )
            .TopBar(
                X.Toolbar()
                    .Items(
                        X.ToolbarFill(),
                        X.Button()
                            .ID("OrdersSaveButton")
                            .Text("Save")
                            .Disabled(true)
                            .Icon(Icon.Disk)
                            .DirectEvents(de => {
                                de.Click.Url = Url.Action("Save", "Orders");
                                de.Click.FormID = "OrdersForm";
                                de.Click.EventMask.ShowMask = true;
                                de.Click.Success = "recordAddSuccess('Orders');";
                            }),
                        X.Button()
                            .ID("OrdersCancelButton")
                            .Text("Cancel")
                            .Disabled(true)
                            .Icon(Icon.Cross)
                            .Listeners(l => {
                                l.Click.Handler = "recordSaveCancel('Orders');";
                            })
                    )
            )
    )
)